/* eslint-disable */
// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.1
 * source: auth.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google\\api\\annotations";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
import * as grpc_web_1 from "grpc-web";
export namespace auth {
    export class IsAdminRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            jwtToken?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("jwtToken" in data && data.jwtToken != undefined) {
                    this.jwtToken = data.jwtToken;
                }
            }
        }
        get jwtToken() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set jwtToken(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            jwtToken?: string;
        }): IsAdminRequest {
            const message = new IsAdminRequest({});
            if (data.jwtToken != null) {
                message.jwtToken = data.jwtToken;
            }
            return message;
        }
        toObject() {
            const data: {
                jwtToken?: string;
            } = {};
            if (this.jwtToken != null) {
                data.jwtToken = this.jwtToken;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.jwtToken.length)
                writer.writeString(1, this.jwtToken);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IsAdminRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IsAdminRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.jwtToken = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IsAdminRequest {
            return IsAdminRequest.deserialize(bytes);
        }
    }
    export class IsAdminResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            isAdmin?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("isAdmin" in data && data.isAdmin != undefined) {
                    this.isAdmin = data.isAdmin;
                }
            }
        }
        get isAdmin() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set isAdmin(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            isAdmin?: boolean;
        }): IsAdminResponse {
            const message = new IsAdminResponse({});
            if (data.isAdmin != null) {
                message.isAdmin = data.isAdmin;
            }
            return message;
        }
        toObject() {
            const data: {
                isAdmin?: boolean;
            } = {};
            if (this.isAdmin != null) {
                data.isAdmin = this.isAdmin;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.isAdmin != false)
                writer.writeBool(1, this.isAdmin);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IsAdminResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IsAdminResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.isAdmin = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IsAdminResponse {
            return IsAdminResponse.deserialize(bytes);
        }
    }
    export class RegistrationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            email?: string;
            password?: string;
            roleId?: number;
            birthdate?: string;
            photourl?: string;
            push?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("roleId" in data && data.roleId != undefined) {
                    this.roleId = data.roleId;
                }
                if ("birthdate" in data && data.birthdate != undefined) {
                    this.birthdate = data.birthdate;
                }
                if ("photourl" in data && data.photourl != undefined) {
                    this.photourl = data.photourl;
                }
                if ("push" in data && data.push != undefined) {
                    this.push = data.push;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get roleId() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set roleId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get birthdate() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set birthdate(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get photourl() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set photourl(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get push() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set push(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            name?: string;
            email?: string;
            password?: string;
            roleId?: number;
            birthdate?: string;
            photourl?: string;
            push?: boolean;
        }): RegistrationRequest {
            const message = new RegistrationRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.roleId != null) {
                message.roleId = data.roleId;
            }
            if (data.birthdate != null) {
                message.birthdate = data.birthdate;
            }
            if (data.photourl != null) {
                message.photourl = data.photourl;
            }
            if (data.push != null) {
                message.push = data.push;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                email?: string;
                password?: string;
                roleId?: number;
                birthdate?: string;
                photourl?: string;
                push?: boolean;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.roleId != null) {
                data.roleId = this.roleId;
            }
            if (this.birthdate != null) {
                data.birthdate = this.birthdate;
            }
            if (this.photourl != null) {
                data.photourl = this.photourl;
            }
            if (this.push != null) {
                data.push = this.push;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.email.length)
                writer.writeString(2, this.email);
            if (this.password.length)
                writer.writeString(3, this.password);
            if (this.roleId != 0)
                writer.writeInt64(4, this.roleId);
            if (this.birthdate.length)
                writer.writeString(5, this.birthdate);
            if (this.photourl.length)
                writer.writeString(6, this.photourl);
            if (this.push != false)
                writer.writeBool(7, this.push);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegistrationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegistrationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.email = reader.readString();
                        break;
                    case 3:
                        message.password = reader.readString();
                        break;
                    case 4:
                        message.roleId = reader.readInt64();
                        break;
                    case 5:
                        message.birthdate = reader.readString();
                        break;
                    case 6:
                        message.photourl = reader.readString();
                        break;
                    case 7:
                        message.push = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegistrationRequest {
            return RegistrationRequest.deserialize(bytes);
        }
    }
    export class LoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            email?: string;
            password?: string;
        }): LoginRequest {
            const message = new LoginRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                password?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginRequest {
            return LoginRequest.deserialize(bytes);
        }
    }
    export class AuthResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            key?: string;
        }): AuthResponse {
            const message = new AuthResponse({});
            if (data.key != null) {
                message.key = data.key;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeString(1, this.key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthResponse {
            return AuthResponse.deserialize(bytes);
        }
    }
    export abstract class UnimplementedAuthServiceService {
        static definition = {
            Login: {
                path: "/auth.AuthService/Login",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AuthResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AuthResponse.deserialize(new Uint8Array(bytes))
            },
            Registration: {
                path: "/auth.AuthService/Registration",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegistrationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegistrationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AuthResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AuthResponse.deserialize(new Uint8Array(bytes))
            },
            IsAdmin: {
                path: "/auth.AuthService/IsAdmin",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: IsAdminRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => IsAdminRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: IsAdminResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => IsAdminResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Login(call: grpc_1.ServerUnaryCall<LoginRequest, AuthResponse>, callback: grpc_1.sendUnaryData<AuthResponse>): void;
        abstract Registration(call: grpc_1.ServerUnaryCall<RegistrationRequest, AuthResponse>, callback: grpc_1.sendUnaryData<AuthResponse>): void;
        abstract IsAdmin(call: grpc_1.ServerUnaryCall<IsAdminRequest, IsAdminResponse>, callback: grpc_1.sendUnaryData<IsAdminResponse>): void;
    }
    export class AuthServiceClient {
        private _address: string;
        private _client: grpc_web_1.GrpcWebClientBase;
        constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
            if (!options)
                options = {};
            options.format = options.format || "text";
            this._address = address;
            this._client = new grpc_web_1.GrpcWebClientBase(options);
        }
        private static Login = new grpc_web_1.MethodDescriptor<LoginRequest, AuthResponse>("/auth.AuthService/Login", grpc_web_1.MethodType.UNARY, LoginRequest, AuthResponse, (message: LoginRequest) => message.serialize(), AuthResponse.deserialize);
        Login(message: LoginRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: AuthResponse) => void) {
            return this._client.rpcCall<LoginRequest, AuthResponse>(this._address + "/auth.AuthService/Login", message, metadata || {}, AuthServiceClient.Login, callback);
        }
        private static Registration = new grpc_web_1.MethodDescriptor<RegistrationRequest, AuthResponse>("/auth.AuthService/Registration", grpc_web_1.MethodType.UNARY, RegistrationRequest, AuthResponse, (message: RegistrationRequest) => message.serialize(), AuthResponse.deserialize);
        Registration(message: RegistrationRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: AuthResponse) => void) {
            return this._client.rpcCall<RegistrationRequest, AuthResponse>(this._address + "/auth.AuthService/Registration", message, metadata || {}, AuthServiceClient.Registration, callback);
        }
        private static IsAdmin = new grpc_web_1.MethodDescriptor<IsAdminRequest, IsAdminResponse>("/auth.AuthService/IsAdmin", grpc_web_1.MethodType.UNARY, IsAdminRequest, IsAdminResponse, (message: IsAdminRequest) => message.serialize(), IsAdminResponse.deserialize);
        IsAdmin(message: IsAdminRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: IsAdminResponse) => void) {
            return this._client.rpcCall<IsAdminRequest, IsAdminResponse>(this._address + "/auth.AuthService/IsAdmin", message, metadata || {}, AuthServiceClient.IsAdmin, callback);
        }
    }
}
