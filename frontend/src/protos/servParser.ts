/* eslint-disable */
// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.1
 * source: servParser.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google\\api\\annotations";
import * as dependency_2 from "./google\\protobuf\\empty";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
import * as grpc_web_1 from "grpc-web";
export namespace servParser {
    export class ServParserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            serversInfo?: ServerInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("serversInfo" in data && data.serversInfo != undefined) {
                    this.serversInfo = data.serversInfo;
                }
            }
        }
        get serversInfo() {
            return pb_1.Message.getRepeatedWrapperField(this, ServerInfo, 1) as ServerInfo[];
        }
        set serversInfo(value: ServerInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            serversInfo?: ReturnType<typeof ServerInfo.prototype.toObject>[];
        }): ServParserResponse {
            const message = new ServParserResponse({});
            if (data.serversInfo != null) {
                message.serversInfo = data.serversInfo.map(item => ServerInfo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                serversInfo?: ReturnType<typeof ServerInfo.prototype.toObject>[];
            } = {};
            if (this.serversInfo != null) {
                data.serversInfo = this.serversInfo.map((item: ServerInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.serversInfo.length)
                writer.writeRepeatedMessage(1, this.serversInfo, (item: ServerInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServParserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServParserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.serversInfo, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ServerInfo.deserialize(reader), ServerInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServParserResponse {
            return ServParserResponse.deserialize(bytes);
        }
    }
    export class ServerInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Adress?: string;
            Name?: string;
            Version?: string;
            MaxOnline?: number;
            Online?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Adress" in data && data.Adress != undefined) {
                    this.Adress = data.Adress;
                }
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("Version" in data && data.Version != undefined) {
                    this.Version = data.Version;
                }
                if ("MaxOnline" in data && data.MaxOnline != undefined) {
                    this.MaxOnline = data.MaxOnline;
                }
                if ("Online" in data && data.Online != undefined) {
                    this.Online = data.Online;
                }
            }
        }
        get Adress() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set Adress(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set Name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get Version() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set Version(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get MaxOnline() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set MaxOnline(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get Online() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set Online(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            Adress?: string;
            Name?: string;
            Version?: string;
            MaxOnline?: number;
            Online?: number;
        }): ServerInfo {
            const message = new ServerInfo({});
            if (data.Adress != null) {
                message.Adress = data.Adress;
            }
            if (data.Name != null) {
                message.Name = data.Name;
            }
            if (data.Version != null) {
                message.Version = data.Version;
            }
            if (data.MaxOnline != null) {
                message.MaxOnline = data.MaxOnline;
            }
            if (data.Online != null) {
                message.Online = data.Online;
            }
            return message;
        }
        toObject() {
            const data: {
                Adress?: string;
                Name?: string;
                Version?: string;
                MaxOnline?: number;
                Online?: number;
            } = {};
            if (this.Adress != null) {
                data.Adress = this.Adress;
            }
            if (this.Name != null) {
                data.Name = this.Name;
            }
            if (this.Version != null) {
                data.Version = this.Version;
            }
            if (this.MaxOnline != null) {
                data.MaxOnline = this.MaxOnline;
            }
            if (this.Online != null) {
                data.Online = this.Online;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Adress.length)
                writer.writeString(1, this.Adress);
            if (this.Name.length)
                writer.writeString(2, this.Name);
            if (this.Version.length)
                writer.writeString(3, this.Version);
            if (this.MaxOnline != 0)
                writer.writeInt64(4, this.MaxOnline);
            if (this.Online != 0)
                writer.writeInt64(5, this.Online);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Adress = reader.readString();
                        break;
                    case 2:
                        message.Name = reader.readString();
                        break;
                    case 3:
                        message.Version = reader.readString();
                        break;
                    case 4:
                        message.MaxOnline = reader.readInt64();
                        break;
                    case 5:
                        message.Online = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServerInfo {
            return ServerInfo.deserialize(bytes);
        }
    }
    export abstract class UnimplementedServParserServiceService {
        static definition = {
            GetServersInfo: {
                path: "/servParser.ServParserService/GetServersInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ServParserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ServParserResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetServersInfo(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, ServParserResponse>, callback: grpc_1.sendUnaryData<ServParserResponse>): void;
    }
    export class ServParserServiceClient {
        private _address: string;
        private _client: grpc_web_1.GrpcWebClientBase;
        constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
            if (!options)
                options = {};
            options.format = options.format || "text";
            this._address = address;
            this._client = new grpc_web_1.GrpcWebClientBase(options);
        }
        private static GetServersInfo = new grpc_web_1.MethodDescriptor<dependency_2.google.protobuf.Empty, ServParserResponse>("/servParser.ServParserService/GetServersInfo", grpc_web_1.MethodType.UNARY, dependency_2.google.protobuf.Empty, ServParserResponse, (message: dependency_2.google.protobuf.Empty) => message.serialize(), ServParserResponse.deserialize);
        GetServersInfo(message: dependency_2.google.protobuf.Empty, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: ServParserResponse) => void) {
            return this._client.rpcCall<dependency_2.google.protobuf.Empty, ServParserResponse>(this._address + "/servParser.ServParserService/GetServersInfo", message, metadata || {}, ServParserServiceClient.GetServersInfo, callback);
        }
    }
}
