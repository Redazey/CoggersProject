// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: servParser.proto

package servParser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ServParserService_GetServerInfo_FullMethodName = "/servParser.servParserService/getServerInfo"
)

// ServParserServiceClient is the client API for ServParserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServParserServiceClient interface {
	GetServerInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServParserResponse, error)
}

type servParserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServParserServiceClient(cc grpc.ClientConnInterface) ServParserServiceClient {
	return &servParserServiceClient{cc}
}

func (c *servParserServiceClient) GetServerInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServParserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServParserResponse)
	err := c.cc.Invoke(ctx, ServParserService_GetServerInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServParserServiceServer is the server API for ServParserService service.
// All implementations must embed UnimplementedServParserServiceServer
// for forward compatibility
type ServParserServiceServer interface {
	GetServerInfo(context.Context, *emptypb.Empty) (*ServParserResponse, error)
	mustEmbedUnimplementedServParserServiceServer()
}

// UnimplementedServParserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServParserServiceServer struct {
}

func (UnimplementedServParserServiceServer) GetServerInfo(context.Context, *emptypb.Empty) (*ServParserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerInfo not implemented")
}
func (UnimplementedServParserServiceServer) mustEmbedUnimplementedServParserServiceServer() {}

// UnsafeServParserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServParserServiceServer will
// result in compilation errors.
type UnsafeServParserServiceServer interface {
	mustEmbedUnimplementedServParserServiceServer()
}

func RegisterServParserServiceServer(s grpc.ServiceRegistrar, srv ServParserServiceServer) {
	s.RegisterService(&ServParserService_ServiceDesc, srv)
}

func _ServParserService_GetServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServParserServiceServer).GetServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServParserService_GetServerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServParserServiceServer).GetServerInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ServParserService_ServiceDesc is the grpc.ServiceDesc for ServParserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServParserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "servParser.servParserService",
	HandlerType: (*ServParserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getServerInfo",
			Handler:    _ServParserService_GetServerInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "servParser.proto",
}
